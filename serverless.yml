org: serverless321
app: crud-app
service: crud-app

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1

functions:
  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref NewCrudTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NewCrudTable.Arn
    events:
      - http:
          path: notes
          method: post
  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref NewCrudTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:updateItem
        Resource: !GetAtt NewCrudTable.Arn 
    events:
      - http:
          path: notes/{id}
          method: put

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref NewCrudTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:deleteItem
        Resource: !GetAtt NewCrudTable.Arn
    events:
      - http:
          path: notes/{id}
          method: delete

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref NewCrudTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
        Resource: !GetAtt NewCrudTable.Arn
    events:
      - http:
          path: notes
          method: get

plugins:
  - serverless-iam-roles-per-function

# You can add CloudFormation resource templates here
resources:
  Resources:
    NewCrudTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
